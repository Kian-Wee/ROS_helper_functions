#!/usr/bin/env python

## Publishes a topic with the the with/after tf transforms
  
import os
import rospy
import math
import os
from geometry_msgs.msg import PoseStamped,PoseWithCovarianceStamped
import tf

drone_name = os.getenv('DRONE_NAME') #environment variable set in bashrc(or exported in terminal)
drone_number = os.getenv('DRONE_NUMBER') #environment variable set in bashrc(or exported in terminal)
# publish_topic = drone_name+ "/global_position/pose"
uav_publish_topic = "/UAV1in"

class transform():

    def __init__(self):

        listener = tf.TransformListener()

        # self.local_pos=PoseStamped()
        # # rospy.Subscriber(drone_name + "/mavros/local_position/pose", PoseStamped, self.position_callback)
        # rospy.Subscriber(drone_name + "/mavros/local_position/pose", PoseStamped, self.position_callback)

        uav_btwn_pos = rospy.Publisher(uav_publish_topic, PoseWithCovarianceStamped,queue_size=1)
        uav_human_pos = rospy.Publisher(human_publish_topic, PoseWithCovarianceStamped,queue_size=1)

        rate = rospy.Rate(200.0)

        while not rospy.is_shutdown():

            try:
                (trans,rot) = listener.lookupTransform("/human", drone_name + "t265_odom_frame", rospy.Time(0))
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
                continue

            cmd = PoseStamped()

            cmd.pose.position.x=trans[0]
            cmd.pose.position.y=trans[1]
            cmd.pose.position.z=trans[2]

            cmd.pose.orientation.x=rot[0]
            cmd.pose.orientation.y=rot[1]
            cmd.pose.orientation.z=rot[2]
            cmd.pose.orientation.w=rot[3]

            uav_btwn_pos.publish(cmd)

            rate.sleep()

    # def position_callback(self,data):
    #     self.local_pos=data

if __name__ == '__main__':
    rospy.init_node(drone_name+'_between_tf_transformer')

    node = transform()

    rospy.spin()


